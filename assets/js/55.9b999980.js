(window.webpackJsonp=window.webpackJsonp||[]).push([[55],{778:function(a,t,e){"use strict";e.r(t);var n=e(97),s=Object(n.a)({},(function(){var a=this,t=a.$createElement,e=a._self._c||t;return e("ContentSlotsDistributor",{attrs:{"slot-key":a.$parent.slotKey}},[e("h1",{attrs:{id:"java-io与nio"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#java-io与nio"}},[a._v("#")]),a._v(" Java IO与NIO")]),a._v(" "),e("h2",{attrs:{id:"io流学习总结"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#io流学习总结"}},[a._v("#")]),a._v(" IO流学习总结")]),a._v(" "),e("h3",{attrs:{id:"一-java-io，硬骨头也能变软"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#一-java-io，硬骨头也能变软"}},[a._v("#")]),a._v(" "),e("a",{attrs:{href:"https://mp.weixin.qq.com/s?__biz=MzU4NDQ4MzU5OA==&mid=2247483981&idx=1&sn=6e5c682d76972c8d2cf271a85dcf09e2&chksm=fd98542ccaefdd3a70428e9549bc33e8165836855edaa748928d16c1ebde9648579d3acaac10#rd",target:"_blank",rel:"noopener noreferrer"}},[a._v("一　Java IO，硬骨头也能变软"),e("OutboundLink")],1)]),a._v(" "),e("p",[e("strong",[a._v("（1） 按操作方式分类结构图：")])]),a._v(" "),e("p",[e("img",{attrs:{src:"https://cdn.willlu.cn/image/java/IO-%E6%93%8D%E4%BD%9C%E6%96%B9%E5%BC%8F%E5%88%86%E7%B1%BB.png",alt:"IO-操作方式分类"}})]),a._v(" "),e("p",[e("strong",[a._v("（2）按操作对象分类结构图")])]),a._v(" "),e("p",[e("img",{attrs:{src:"https://cdn.willlu.cn/image/java/IO-%E6%93%8D%E4%BD%9C%E5%AF%B9%E8%B1%A1%E5%88%86%E7%B1%BB.png",alt:"IO-操作对象分类"}})]),a._v(" "),e("h3",{attrs:{id:"二-java-io体系的学习总结"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#二-java-io体系的学习总结"}},[a._v("#")]),a._v(" "),e("a",{attrs:{href:"https://blog.csdn.net/nightcurtis/article/details/51324105",target:"_blank",rel:"noopener noreferrer"}},[a._v("二　java IO体系的学习总结"),e("OutboundLink")],1)]),a._v(" "),e("ol",[e("li",[e("p",[e("strong",[a._v("IO流的分类：")])]),a._v(" "),e("ul",[e("li",[a._v("按照流的流向分，可以分为输入流和输出流；")]),a._v(" "),e("li",[a._v("按照操作单元划分，可以划分为字节流和字符流；")]),a._v(" "),e("li",[a._v("按照流的角色划分为节点流和处理流。")])])]),a._v(" "),e("li",[e("p",[e("strong",[a._v("流的原理浅析:")])]),a._v(" "),e("p",[a._v("java Io流共涉及40多个类，这些类看上去很杂乱，但实际上很有规则，而且彼此之间存在非常紧密的联系， Java Io流的40多个类都是从如下4个抽象类基类中派生出来的。")]),a._v(" "),e("ul",[e("li",[e("strong",[a._v("InputStream/Reader")]),a._v(": 所有的输入流的基类，前者是字节输入流，后者是字符输入流。")]),a._v(" "),e("li",[e("strong",[a._v("OutputStream/Writer")]),a._v(": 所有输出流的基类，前者是字节输出流，后者是字符输出流。")])])]),a._v(" "),e("li",[e("p",[e("strong",[a._v("常用的io流的用法")])])])]),a._v(" "),e("h3",{attrs:{id:"三-java-io面试题"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#三-java-io面试题"}},[a._v("#")]),a._v(" "),e("a",{attrs:{href:"https://mp.weixin.qq.com/s?__biz=MzU4NDQ4MzU5OA==&mid=2247483985&idx=1&sn=38531c2cee7b87f125df7aef41637014&chksm=fd985430caefdd26b0506aa84fc26251877eccba24fac73169a4d6bd1eb5e3fbdf3c3b940261#rd",target:"_blank",rel:"noopener noreferrer"}},[a._v("三　Java IO面试题"),e("OutboundLink")],1)]),a._v(" "),e("h2",{attrs:{id:"nio与aio学习总结"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#nio与aio学习总结"}},[a._v("#")]),a._v(" NIO与AIO学习总结")]),a._v(" "),e("h3",{attrs:{id:"一-java-nio-概览"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#一-java-nio-概览"}},[a._v("#")]),a._v(" "),e("a",{attrs:{href:"https://mp.weixin.qq.com/s?__biz=MzU4NDQ4MzU5OA==&mid=2247483956&idx=1&sn=57692bc5b7c2c6dfb812489baadc29c9&chksm=fd985455caefdd4331d828d8e89b22f19b304aa87d6da73c5d8c66fcef16e4c0b448b1a6f791#rd",target:"_blank",rel:"noopener noreferrer"}},[a._v("一 Java NIO 概览"),e("OutboundLink")],1)]),a._v(" "),e("ol",[e("li",[e("p",[e("strong",[a._v("NIO简介")]),a._v(":")]),a._v(" "),e("p",[a._v("Java NIO 是 java 1.4, 之后新出的一套IO接口NIO中的N可以理解为Non-blocking，不单纯是New。")])]),a._v(" "),e("li",[e("p",[e("strong",[a._v("NIO的特性/NIO与IO区别:")])]),a._v(" "),e("ul",[e("li",[a._v("1)IO是面向流的，NIO是面向缓冲区的；")]),a._v(" "),e("li",[a._v("2)IO流是阻塞的，NIO流是不阻塞的;")]),a._v(" "),e("li",[a._v("3)NIO有选择器，而IO没有。")])])]),a._v(" "),e("li",[e("p",[e("strong",[a._v("读数据和写数据方式:")])]),a._v(" "),e("ul",[e("li",[e("p",[a._v("从通道进行数据读取 ：创建一个缓冲区，然后请求通道读取数据。")])]),a._v(" "),e("li",[e("p",[a._v("从通道进行数据写入 ：创建一个缓冲区，填充数据，并要求通道写入数据。")])])])]),a._v(" "),e("li",[e("p",[e("strong",[a._v("NIO核心组件简单介绍")])]),a._v(" "),e("ul",[e("li",[e("strong",[a._v("Channels")])]),a._v(" "),e("li",[e("strong",[a._v("Buffers")])]),a._v(" "),e("li",[e("strong",[a._v("Selectors")])])])])]),a._v(" "),e("h3",{attrs:{id:"二-java-nio-之-buffer-缓冲区"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#二-java-nio-之-buffer-缓冲区"}},[a._v("#")]),a._v(" "),e("a",{attrs:{href:"https://mp.weixin.qq.com/s?__biz=MzU4NDQ4MzU5OA==&mid=2247483961&idx=1&sn=f67bef4c279e78043ff649b6b03fdcbc&chksm=fd985458caefdd4e3317ccbdb2d0a5a70a5024d3255eebf38183919ed9c25ade536017c0a6ba#rd",target:"_blank",rel:"noopener noreferrer"}},[a._v("二 Java NIO 之 Buffer(缓冲区)"),e("OutboundLink")],1)]),a._v(" "),e("ol",[e("li",[e("p",[e("strong",[a._v("Buffer(缓冲区)介绍:")])]),a._v(" "),e("ul",[e("li",[a._v("Java NIO Buffers用于和NIO Channel交互。 我们从Channel中读取数据到buffers里，从Buffer把数据写入到Channels；")]),a._v(" "),e("li",[a._v("Buffer本质上就是一块内存区；")]),a._v(" "),e("li",[a._v("一个Buffer有三个属性是必须掌握的，分别是：capacity容量、position位置、limit限制。")])])]),a._v(" "),e("li",[e("p",[e("strong",[a._v("Buffer的常见方法")])]),a._v(" "),e("ul",[e("li",[a._v("Buffer clear()")]),a._v(" "),e("li",[a._v("Buffer flip()")]),a._v(" "),e("li",[a._v("Buffer rewind()")]),a._v(" "),e("li",[a._v("Buffer position(int newPosition)")])])]),a._v(" "),e("li",[e("p",[e("strong",[a._v("Buffer的使用方式/方法介绍:")])]),a._v(" "),e("ul",[e("li",[a._v("分配缓冲区（Allocating a Buffer）:")])]),a._v(" "),e("div",{staticClass:"language-java extra-class"},[e("pre",{pre:!0,attrs:{class:"language-java"}},[e("code",[e("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("ByteBuffer")]),a._v(" buf "),e("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),e("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("ByteBuffer")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),e("span",{pre:!0,attrs:{class:"token function"}},[a._v("allocate")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),e("span",{pre:!0,attrs:{class:"token number"}},[a._v("28")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),e("span",{pre:!0,attrs:{class:"token comment"}},[a._v("//以ByteBuffer为例子")]),a._v("\n")])])]),e("ul",[e("li",[a._v("写入数据到缓冲区（Writing Data to a Buffer）")])]),a._v(" "),e("p",[e("strong",[a._v("写数据到Buffer有两种方法：")])]),a._v(" "),e("p",[a._v("1.从Channel中写数据到Buffer")]),a._v(" "),e("div",{staticClass:"language-java extra-class"},[e("pre",{pre:!0,attrs:{class:"language-java"}},[e("code",[e("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("int")]),a._v(" bytesRead "),e("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" inChannel"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),e("span",{pre:!0,attrs:{class:"token function"}},[a._v("read")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),a._v("buf"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v(" "),e("span",{pre:!0,attrs:{class:"token comment"}},[a._v("//read into buffer.")]),a._v("\n")])])]),e("p",[a._v("2.通过put写数据：")]),a._v(" "),e("div",{staticClass:"language-java extra-class"},[e("pre",{pre:!0,attrs:{class:"language-java"}},[e("code",[a._v("buf"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),e("span",{pre:!0,attrs:{class:"token function"}},[a._v("put")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),e("span",{pre:!0,attrs:{class:"token number"}},[a._v("127")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n")])])])]),a._v(" "),e("li",[e("p",[e("strong",[a._v("Buffer常用方法测试")])]),a._v(" "),e("p",[a._v("说实话，NIO编程真的难，通过后面这个测试例子，你可能才能勉强理解前面说的Buffer方法的作用。")])])]),a._v(" "),e("h3",{attrs:{id:"三-java-nio-之-channel（通道）"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#三-java-nio-之-channel（通道）"}},[a._v("#")]),a._v(" "),e("a",{attrs:{href:"https://mp.weixin.qq.com/s?__biz=MzU4NDQ4MzU5OA==&mid=2247483966&idx=1&sn=d5cf18c69f5f9ec2aff149270422731f&chksm=fd98545fcaefdd49296e2c78000ce5da277435b90ba3c03b92b7cf54c6ccc71d61d13efbce63#rd",target:"_blank",rel:"noopener noreferrer"}},[a._v("三 Java NIO 之 Channel（通道）"),e("OutboundLink")],1)]),a._v(" "),e("ol",[e("li",[e("strong",[a._v("Channel（通道）介绍")]),a._v(" "),e("ul",[e("li",[a._v("通常来说NIO中的所有IO都是从 Channel（通道） 开始的。")]),a._v(" "),e("li",[a._v("NIO Channel通道和流的区别：")])])]),a._v(" "),e("li",[e("strong",[a._v("FileChannel的使用")])]),a._v(" "),e("li",[e("strong",[a._v("SocketChannel和ServerSocketChannel的使用")])]),a._v(" "),e("li",[e("strong",[a._v("️DatagramChannel的使用")])]),a._v(" "),e("li",[e("strong",[a._v("Scatter / Gather")]),a._v(" "),e("ul",[e("li",[a._v("Scatter: 从一个Channel读取的信息分散到N个缓冲区中(Buufer).")]),a._v(" "),e("li",[a._v("Gather: 将N个Buffer里面内容按照顺序发送到一个Channel.")])])]),a._v(" "),e("li",[e("strong",[a._v("通道之间的数据传输")]),a._v(" "),e("ul",[e("li",[a._v("在Java NIO中如果一个channel是FileChannel类型的，那么他可以直接把数据传输到另一个channel。")]),a._v(" "),e("li",[a._v("transferFrom() :transferFrom方法把数据从通道源传输到FileChannel")]),a._v(" "),e("li",[a._v("transferTo() :transferTo方法把FileChannel数据传输到另一个channel")])])])]),a._v(" "),e("h3",{attrs:{id:"四-java-nio之selector（选择器）"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#四-java-nio之selector（选择器）"}},[a._v("#")]),a._v(" "),e("a",{attrs:{href:"https://mp.weixin.qq.com/s?__biz=MzU4NDQ4MzU5OA==&mid=2247483970&idx=1&sn=d5e2b133313b1d0f32872d54fbdf0aa7&chksm=fd985423caefdd354b587e57ce6cf5f5a7bec48b9ab7554f39a8d13af47660cae793956e0f46#rd",target:"_blank",rel:"noopener noreferrer"}},[a._v("四 Java NIO之Selector（选择器）"),e("OutboundLink")],1)]),a._v(" "),e("ol",[e("li",[e("p",[e("strong",[a._v("Selector（选择器）介绍")])]),a._v(" "),e("ul",[e("li",[a._v("Selector 一般称 为选择器 ，当然你也可以翻译为 多路复用器 。它是Java NIO核心组件中的一个，用于检查一个或多个NIO Channel（通道）的状态是否处于可读、可写。如此可以实现单线程管理多个channels,也就是可以管理多个网络链接。")]),a._v(" "),e("li",[a._v("使用Selector的好处在于： 使用更少的线程来就可以来处理通道了， 相比使用多个线程，避免了线程上下文切换带来的开销。")])])]),a._v(" "),e("li",[e("p",[e("strong",[a._v("Selector（选择器）的使用方法介绍")])]),a._v(" "),e("ul",[e("li",[a._v("Selector的创建")])]),a._v(" "),e("div",{staticClass:"language-java extra-class"},[e("pre",{pre:!0,attrs:{class:"language-java"}},[e("code",[e("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("Selector")]),a._v(" selector "),e("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),e("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("Selector")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),e("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("open")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n")])])]),e("ul",[e("li",[a._v("注册Channel到Selector(Channel必须是非阻塞的)")])]),a._v(" "),e("div",{staticClass:"language-java extra-class"},[e("pre",{pre:!0,attrs:{class:"language-java"}},[e("code",[a._v("channel"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),e("span",{pre:!0,attrs:{class:"token function"}},[a._v("configureBlocking")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),e("span",{pre:!0,attrs:{class:"token boolean"}},[a._v("false")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n"),e("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("SelectionKey")]),a._v(" key "),e("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" channel"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),e("span",{pre:!0,attrs:{class:"token function"}},[a._v("register")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),a._v("selector"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),a._v(" "),e("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("Selectionkey")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),a._v("OP_READ"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n")])])]),e("ul",[e("li",[e("p",[a._v("SelectionKey介绍")]),a._v(" "),e("p",[a._v("一个SelectionKey键表示了一个特定的通道对象和一个特定的选择器对象之间的注册关系。")])]),a._v(" "),e("li",[e("p",[a._v("从Selector中选择channel(Selecting Channels via a Selector)")]),a._v(" "),e("p",[a._v("选择器维护注册过的通道的集合，并且这种注册关系都被封装在SelectionKey当中.")])]),a._v(" "),e("li",[e("p",[a._v("停止选择的方法")]),a._v(" "),e("p",[a._v("wakeup()方法 和close()方法。")])])])]),a._v(" "),e("li",[e("p",[e("strong",[a._v("模板代码")])]),a._v(" "),e("p",[a._v("有了模板代码我们在编写程序时，大多数时间都是在模板代码中添加相应的业务代码。")])]),a._v(" "),e("li",[e("p",[e("strong",[a._v("客户端与服务端简单交互实例")])])])]),a._v(" "),e("h3",{attrs:{id:"五-java-nio之拥抱path和files"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#五-java-nio之拥抱path和files"}},[a._v("#")]),a._v(" "),e("a",{attrs:{href:"https://mp.weixin.qq.com/s?__biz=MzU4NDQ4MzU5OA==&mid=2247483976&idx=1&sn=2296c05fc1b840a64679e2ad7794c96d&chksm=fd985429caefdd3f48e2ee6fdd7b0f6fc419df90b3de46832b484d6d1ca4e74e7837689c8146&token=537240785&lang=zh_CN#rd",target:"_blank",rel:"noopener noreferrer"}},[a._v("五 Java NIO之拥抱Path和Files"),e("OutboundLink")],1)]),a._v(" "),e("p",[e("strong",[a._v("一 文件I/O基石：Path：")])]),a._v(" "),e("ul",[e("li",[a._v("创建一个Path")]),a._v(" "),e("li",[a._v("File和Path之间的转换，File和URI之间的转换")]),a._v(" "),e("li",[a._v("获取Path的相关信息")]),a._v(" "),e("li",[a._v("移除Path中的冗余项")])]),a._v(" "),e("p",[e("strong",[a._v("二 拥抱Files类：")])]),a._v(" "),e("ul",[e("li",[a._v("Files.exists() 检测文件路径是否存在")]),a._v(" "),e("li",[a._v("Files.createFile() 创建文件")]),a._v(" "),e("li",[a._v("Files.createDirectories()和Files.createDirectory()创建文件夹")]),a._v(" "),e("li",[a._v("Files.delete()方法 可以删除一个文件或目录")]),a._v(" "),e("li",[a._v("Files.copy()方法可以吧一个文件从一个地址复制到另一个位置")]),a._v(" "),e("li",[a._v("获取文件属性")]),a._v(" "),e("li",[a._v("遍历一个文件夹")]),a._v(" "),e("li",[a._v("Files.walkFileTree()遍历整个目录")])]),a._v(" "),e("h3",{attrs:{id:"六-nio学习总结以及nio新特性介绍"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#六-nio学习总结以及nio新特性介绍"}},[a._v("#")]),a._v(" "),e("a",{attrs:{href:"https://blog.csdn.net/a953713428/article/details/64907250",target:"_blank",rel:"noopener noreferrer"}},[a._v("六 NIO学习总结以及NIO新特性介绍"),e("OutboundLink")],1)]),a._v(" "),e("ul",[e("li",[e("strong",[a._v("内存映射：")])])]),a._v(" "),e("p",[a._v("这个功能主要是为了提高大文件的读写速度而设计的。内存映射文件(memory-mappedfile)能让你创建和修改那些大到无法读入内存的文件。有了内存映射文件，你就可以认为文件已经全部读进了内存，然后把它当成一个非常大的数组来访问了。将文件的一段区域映射到内存中，比传统的文件处理速度要快很多。内存映射文件它虽然最终也是要从磁盘读取数据，但是它并不需要将数据读取到OS内核缓冲区，而是直接将进程的用户私有地址空间中的一部分区域与文件对象建立起映射关系，就好像直接从内存中读、写文件一样，速度当然快了。")]),a._v(" "),e("h3",{attrs:{id:"七-java-nio-asynchronousfilechannel异步文件通"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#七-java-nio-asynchronousfilechannel异步文件通"}},[a._v("#")]),a._v(" "),e("a",{attrs:{href:"http://wiki.jikexueyuan.com/project/java-nio-zh/java-nio-asynchronousfilechannel.html",target:"_blank",rel:"noopener noreferrer"}},[a._v("七 Java NIO AsynchronousFileChannel异步文件通"),e("OutboundLink")],1)]),a._v(" "),e("p",[a._v("Java7中新增了AsynchronousFileChannel作为nio的一部分。AsynchronousFileChannel使得数据可以进行异步读写。")]),a._v(" "),e("h3",{attrs:{id:"八-高并发java（8）：nio和aio"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#八-高并发java（8）：nio和aio"}},[a._v("#")]),a._v(" "),e("a",{attrs:{href:"http://www.importnew.com/21341.html",target:"_blank",rel:"noopener noreferrer"}},[a._v("八 高并发Java（8）：NIO和AIO"),e("OutboundLink")],1)]),a._v(" "),e("h2",{attrs:{id:"推荐阅读"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#推荐阅读"}},[a._v("#")]),a._v(" 推荐阅读")]),a._v(" "),e("h3",{attrs:{id:"在-java-7-中体会-nio-2-异步执行的快乐"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#在-java-7-中体会-nio-2-异步执行的快乐"}},[a._v("#")]),a._v(" "),e("a",{attrs:{href:"https://www.ibm.com/developerworks/cn/java/j-lo-nio2/index.html",target:"_blank",rel:"noopener noreferrer"}},[a._v("在 Java 7 中体会 NIO.2 异步执行的快乐"),e("OutboundLink")],1)]),a._v(" "),e("h3",{attrs:{id:"java-aio总结与示例"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#java-aio总结与示例"}},[a._v("#")]),a._v(" "),e("a",{attrs:{href:"https://blog.csdn.net/x_i_y_u_e/article/details/52223406",target:"_blank",rel:"noopener noreferrer"}},[a._v("Java AIO总结与示例"),e("OutboundLink")],1)]),a._v(" "),e("p",[a._v("AIO是异步IO的缩写，虽然NIO在网络操作中，提供了非阻塞的方法，但是NIO的IO行为还是同步的。对于NIO来说，我们的业务线程是在IO操作准备好时，得到通知，接着就由这个线程自行进行IO操作，IO操作本身是同步的。")]),a._v(" "),e("h2",{attrs:{id:"来源"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#来源"}},[a._v("#")]),a._v(" 来源")]),a._v(" "),e("ul",[e("li",[a._v("https://github.com/Snailclimb/JavaGuide")])])])}),[],!1,null,null,null);t.default=s.exports}}]);