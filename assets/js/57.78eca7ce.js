(window.webpackJsonp=window.webpackJsonp||[]).push([[57],{788:function(a,t,s){"use strict";s.r(t);var v=s(97),r=Object(v.a)({},(function(){var a=this,t=a.$createElement,s=a._self._c||t;return s("ContentSlotsDistributor",{attrs:{"slot-key":a.$parent.slotKey}},[s("h1",{attrs:{id:"java基础知识"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#java基础知识"}},[a._v("#")]),a._v(" Java基础知识")]),a._v(" "),s("h2",{attrs:{id:"_1-面向对象和面向过程的区别"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_1-面向对象和面向过程的区别"}},[a._v("#")]),a._v(" 1. 面向对象和面向过程的区别")]),a._v(" "),s("ul",[s("li",[s("strong",[a._v("面向过程")]),a._v(" ："),s("strong",[a._v("面向过程性能比面向对象高。")]),a._v(" 因为类调用时需要实例化，开销比较大，比较消耗资源，所以当性能是最重要的考量因素的时候，比如单片机、嵌入式开发、Linux/Unix 等一般采用面向过程开发。但是，"),s("strong",[a._v("面向过程没有面向对象易维护、易复用、易扩展。")])]),a._v(" "),s("li",[s("strong",[a._v("面向对象")]),a._v(" ："),s("strong",[a._v("面向对象易维护、易复用、易扩展。")]),a._v(" 因为面向对象有封装、继承、多态性的特性，所以可以设计出低耦合的系统，使系统更加灵活、更加易于维护。但是，"),s("strong",[a._v("面向对象性能比面向过程低")]),a._v("。")])]),a._v(" "),s("div",{staticClass:"custom-block warning"},[s("p",{staticClass:"custom-block-title"},[a._v("注意")]),a._v(" "),s("p",[a._v("这个并不是根本原因，面向过程也需要分配内存，计算内存偏移量，Java 性能差的主要原因并不是因为它是面向对象语言，而是 Java 是半编译语言，最终的执行代码并不是可以直接被 CPU 执行的二进制机械码。")]),a._v(" "),s("p",[a._v("而面向过程语言大多都是直接编译成机械码在电脑上执行，并且其它一些面向过程的脚本语言性能也并不一定比 Java 好。")])]),a._v(" "),s("h2",{attrs:{id:"_2-java-语言有哪些特点"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_2-java-语言有哪些特点"}},[a._v("#")]),a._v(" 2. Java 语言有哪些特点?")]),a._v(" "),s("ol",[s("li",[a._v("简单易学；")]),a._v(" "),s("li",[a._v("面向对象（封装，继承，多态）；")]),a._v(" "),s("li",[a._v("平台无关性（ Java 虚拟机实现平台无关性）；")]),a._v(" "),s("li",[a._v("可靠性；")]),a._v(" "),s("li",[a._v("安全性；")]),a._v(" "),s("li",[a._v("支持多线程（ C++ 语言没有内置的多线程机制，因此必须调用操作系统的多线程功能来进行多线程程序设计，而 Java 语言却提供了多线程支持）；")]),a._v(" "),s("li",[a._v("支持网络编程并且很方便（ Java 语言诞生本身就是为简化网络编程设计的，因此 Java 语言不仅支持网络编程而且很方便）；")]),a._v(" "),s("li",[a._v("编译与解释并存；")])]),a._v(" "),s("div",{staticClass:"custom-block tip"},[s("p",{staticClass:"custom-block-title"},[a._v("修正")]),a._v(" "),s("p",[a._v("C++11 开始（2011 年的时候）,C++就引入了多线程库，在 windows、linux、macos 都可以使用"),s("code",[a._v("std::thread")]),a._v("和"),s("code",[a._v("std::async")]),a._v("来创建线程。参考链接：http://www.cplusplus.com/reference/thread/thread/?kw=thread")])]),a._v(" "),s("h2",{attrs:{id:"_3-关于-jvm-jdk-和-jre-最详细通俗的解答"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_3-关于-jvm-jdk-和-jre-最详细通俗的解答"}},[a._v("#")]),a._v(" 3. 关于 JVM JDK 和 JRE 最详细通俗的解答")]),a._v(" "),s("h3",{attrs:{id:"jvm"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#jvm"}},[a._v("#")]),a._v(" JVM")]),a._v(" "),s("p",[a._v("Java 虚拟机（JVM）是运行 Java 字节码的虚拟机。JVM 有针对不同系统的特定实现（Windows，Linux，macOS），目的是使用相同的字节码，它们都会给出相同的结果。")]),a._v(" "),s("p",[s("strong",[a._v("什么是字节码?采用字节码的好处是什么?")])]),a._v(" "),s("div",{staticClass:"custom-block tip"},[s("p",{staticClass:"custom-block-title"},[a._v("在 Java 中")]),a._v(" "),s("p",[a._v("JVM 可以理解的代码就叫做"),s("code",[a._v("字节码")]),a._v("（即扩展名为 "),s("code",[a._v(".class")]),a._v(" 的文件），它不面向任何特定的处理器，只面向虚拟机。Java 语言通过字节码的方式，在一定程度上解决了传统解释型语言执行效率低的问题，同时又保留了解释型语言可移植的特点。所以 Java 程序运行时比较高效，而且，由于字节码并不针对一种特定的机器，因此，Java 程序无须重新编译便可在多种不同操作系统的计算机上运行。")])]),a._v(" "),s("p",[s("strong",[a._v("Java 程序从源代码到运行一般有下面 3 步：")])]),a._v(" "),s("p",[s("img",{attrs:{src:"https://cdn.willlu.cn/image/java/Java%20%E7%A8%8B%E5%BA%8F%E8%BF%90%E8%A1%8C%E8%BF%87%E7%A8%8B.png",alt:"Java程序运行过程"}})]),a._v(" "),s("p",[a._v("我们需要格外注意的是 .class->机器码 这一步。在这一步 JVM 类加载器首先加载字节码文件，然后通过解释器逐行解释执行，这种方式的执行速度会相对比较慢。而且，有些方法和代码块是经常需要被调用的(也就是所谓的热点代码)，所以后面引进了 JIT 编译器，而 JIT 属于运行时编译。当 JIT 编译器完成第一次编译后，其会将字节码对应的机器码保存下来，下次可以直接使用。而我们知道，机器码的运行效率肯定是高于 Java 解释器的。这也解释了我们为什么经常会说 Java 是编译与解释共存的语言。")]),a._v(" "),s("div",{staticClass:"custom-block tip"},[s("p",{staticClass:"custom-block-title"},[a._v("HotSpot")]),a._v(" "),s("p",[a._v("采用了惰性评估(Lazy Evaluation)的做法，根据二八定律，消耗大部分系统资源的只有那一小部分的代码（热点代码），而这也就是 JIT 所需要编译的部分。JVM 会根据代码每次被执行的情况收集信息并相应地做出一些优化，因此执行的次数越多，它的速度就越快。JDK 9 引入了一种新的编译模式 AOT(Ahead of Time Compilation)，它是直接将字节码编译成机器码，这样就避免了 JIT 预热等各方面的开销。JDK 支持分层编译和 AOT 协作使用。但是 ，AOT 编译器的编译质量是肯定比不上 JIT 编译器的。")])]),a._v(" "),s("p",[s("strong",[a._v("总结：")])]),a._v(" "),s("p",[a._v("Java 虚拟机（JVM）是运行 Java 字节码的虚拟机。JVM 有针对不同系统的特定实现（Windows，Linux，macOS），目的是使用相同的字节码，它们都会给出相同的结果。字节码和不同系统的 JVM 实现是 Java 语言“一次编译，随处可以运行”的关键所在。")]),a._v(" "),s("h3",{attrs:{id:"jdk-和-jre"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#jdk-和-jre"}},[a._v("#")]),a._v(" JDK 和 JRE")]),a._v(" "),s("p",[a._v("JDK 是 Java Development Kit，它是功能齐全的 Java SDK。它拥有 JRE 所拥有的一切，还有编译器（javac）和工具（如 javadoc 和 jdb）。它能够创建和编译程序。")]),a._v(" "),s("p",[a._v("JRE 是 Java 运行时环境。它是运行已编译 Java 程序所需的所有内容的集合，包括 Java 虚拟机（JVM），Java 类库，java 命令和其他的一些基础构件。但是，它不能用于创建新程序。")]),a._v(" "),s("p",[a._v("如果你只是为了运行一下 Java 程序的话，那么你只需要安装 JRE 就可以了。如果你需要进行一些 Java 编程方面的工作，那么你就需要安装 JDK 了。但是，这不是绝对的。有时，即使您不打算在计算机上进行任何 Java 开发，仍然需要安装 JDK。例如，如果要使用 JSP 部署 Web 应用程序，那么从技术上讲，您只是在应用程序服务器中运行 Java 程序。那你为什么需要 JDK 呢？因为应用程序服务器会将 JSP 转换为 Java servlet，并且需要使用 JDK 来编译 servlet。")]),a._v(" "),s("h2",{attrs:{id:"_4-oracle-jdk-和-openjdk-的对比"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_4-oracle-jdk-和-openjdk-的对比"}},[a._v("#")]),a._v(" 4. Oracle JDK 和 OpenJDK 的对比")]),a._v(" "),s("p",[a._v("可能在看这个问题之前很多人和我一样并没有接触和使用过 OpenJDK 。那么 Oracle 和 OpenJDK 之间是否存在重大差异？下面我通过收集到的一些资料，为你解答这个被很多人忽视的问题。")]),a._v(" "),s("p",[a._v("对于 Java 7，没什么关键的地方。OpenJDK 项目主要基于 Sun 捐赠的 HotSpot 源代码。此外，OpenJDK 被选为 Java 7 的参考实现，由 Oracle 工程师维护。关于 JVM，JDK，JRE 和 OpenJDK 之间的区别，Oracle 博客帖子在 2012 年有一个更详细的答案：")]),a._v(" "),s("details",{staticClass:"custom-block details"},[s("summary",[a._v("问：OpenJDK 存储库中的源代码与用于构建 Oracle JDK 的代码之间有什么区别？")]),a._v(" "),s("p",[a._v("答：非常接近 - 我们的 Oracle JDK 版本构建过程基于 OpenJDK 7 构建，只添加了几个部分，例如部署代码，其中包括 Oracle 的 Java 插件和 Java WebStart 的实现，以及一些封闭的源代码派对组件，如图形光栅化器，一些开源的第三方组件，如 Rhino，以及一些零碎的东西，如附加文档或第三方字体。展望未来，我们的目的是开源 Oracle JDK 的所有部分，除了我们考虑商业功能的部分。")])]),a._v(" "),s("p",[s("strong",[a._v("总结：")])]),a._v(" "),s("ol",[s("li",[a._v("Oracle JDK 大概每 6 个月发一次主要版本，而 OpenJDK 版本大概每三个月发布一次。但这不是固定的，我觉得了解这个没啥用处。详情参见：https://blogs.oracle.com/java-platform-group/update-and-faq-on-the-java-se-release-cadence。")]),a._v(" "),s("li",[a._v("OpenJDK 是一个参考模型并且是完全开源的，而 Oracle JDK 是 OpenJDK 的一个实现，并不是完全开源的；")]),a._v(" "),s("li",[a._v("Oracle JDK 比 OpenJDK 更稳定。OpenJDK 和 Oracle JDK 的代码几乎相同，但 Oracle JDK 有更多的类和一些错误修复。因此，如果您想开发企业/商业软件，我建议您选择 Oracle JDK，因为它经过了彻底的测试和稳定。某些情况下，有些人提到在使用 OpenJDK 可能会遇到了许多应用程序崩溃的问题，但是，只需切换到 Oracle JDK 就可以解决问题；")]),a._v(" "),s("li",[a._v("在响应性和 JVM 性能方面，Oracle JDK 与 OpenJDK 相比提供了更好的性能；")]),a._v(" "),s("li",[a._v("Oracle JDK 不会为即将发布的版本提供长期支持，用户每次都必须通过更新到最新版本获得支持来获取最新版本；")]),a._v(" "),s("li",[a._v("Oracle JDK 根据二进制代码许可协议获得许可，而 OpenJDK 根据 GPL v2 许可获得许可。")])]),a._v(" "),s("h2",{attrs:{id:"_5-java-和-c-的区别"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_5-java-和-c-的区别"}},[a._v("#")]),a._v(" 5. Java 和 C++的区别?")]),a._v(" "),s("p",[a._v("我知道很多人没学过 C++，但是面试官就是没事喜欢拿咱们 Java 和 C++ 比呀！没办法！！！就算没学过 C++，也要记下来！")]),a._v(" "),s("ul",[s("li",[a._v("都是面向对象的语言，都支持封装、继承和多态")]),a._v(" "),s("li",[a._v("Java 不提供指针来直接访问内存，程序内存更加安全")]),a._v(" "),s("li",[a._v("Java 的类是单继承的，C++ 支持多重继承；虽然 Java 的类不可以多继承，但是接口可以多继承。")]),a._v(" "),s("li",[a._v("Java 有自动内存管理机制，不需要程序员手动释放无用内存")]),a._v(" "),s("li",[s("strong",[a._v("在 C 语言中，字符串或字符数组最后都会有一个额外的字符‘\\0’来表示结束。但是，Java 语言中没有结束符这一概念。")]),a._v(" 这是一个值得深度思考的问题，具体原因推荐看这篇文章： "),s("a",{attrs:{href:"https://blog.csdn.net/sszgg2006/article/details/49148189",target:"_blank",rel:"noopener noreferrer"}},[a._v("https://blog.csdn.net/sszgg2006/article/details/49148189"),s("OutboundLink")],1)])]),a._v(" "),s("h2",{attrs:{id:"_6-什么是-java-程序的主类-应用程序和小程序的主类有何不同"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_6-什么是-java-程序的主类-应用程序和小程序的主类有何不同"}},[a._v("#")]),a._v(" 6. 什么是 Java 程序的主类 应用程序和小程序的主类有何不同?")]),a._v(" "),s("p",[a._v("一个程序中可以有多个类，但只能有一个类是主类。在 Java 应用程序中，这个主类是指包含 main（）方法的类。而在 Java 小程序中，这个主类是一个继承自系统类 JApplet 或 Applet 的子类。应用程序的主类不一定要求是 public 类，但小程序的主类要求必须是 public 类。主类是 Java 程序执行的入口点。")]),a._v(" "),s("h2",{attrs:{id:"_7-java-应用程序与小程序之间有哪些差别"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_7-java-应用程序与小程序之间有哪些差别"}},[a._v("#")]),a._v(" 7. Java 应用程序与小程序之间有哪些差别?")]),a._v(" "),s("p",[a._v("简单说应用程序是从主线程启动(也就是 "),s("code",[a._v("main()")]),a._v(" 方法)。applet 小程序没有 "),s("code",[a._v("main()")]),a._v(" 方法，主要是嵌在浏览器页面上运行(调用"),s("code",[a._v("init()")]),a._v("或者"),s("code",[a._v("run()")]),a._v("来启动)，嵌入浏览器这点跟 flash 的小游戏类似。")]),a._v(" "),s("h2",{attrs:{id:"_8-字符型常量和字符串常量的区别"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_8-字符型常量和字符串常量的区别"}},[a._v("#")]),a._v(" 8. 字符型常量和字符串常量的区别?")]),a._v(" "),s("ol",[s("li",[a._v("形式上: 字符常量是单引号引起的一个字符; 字符串常量是双引号引起的若干个字符")]),a._v(" "),s("li",[a._v("含义上: 字符常量相当于一个整型值( ASCII 值),可以参加表达式运算; 字符串常量代表一个地址值(该字符串在内存中存放位置)")]),a._v(" "),s("li",[a._v("占内存大小 字符常量只占 2 个字节; 字符串常量占若干个字节 ("),s("strong",[a._v("注意： char 在 Java 中占两个字节")]),a._v(")")])]),a._v(" "),s("blockquote",[s("p",[a._v("java 编程思想第四版：2.2.2 节\n"),s("img",{attrs:{src:"https://cdn.willlu.cn/image/java/86735519.jpg",alt:""}})])]),a._v(" "),s("h2",{attrs:{id:"_9-构造器-constructor-是否可被-override"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_9-构造器-constructor-是否可被-override"}},[a._v("#")]),a._v(" 9. 构造器 Constructor 是否可被 override?")]),a._v(" "),s("p",[a._v("Constructor 不能被 override（重写）,但是可以 overload（重载）,所以你可以看到一个类中有多个构造函数的情况。")]),a._v(" "),s("h2",{attrs:{id:"_10-重载和重写的区别"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_10-重载和重写的区别"}},[a._v("#")]),a._v(" 10. 重载和重写的区别")]),a._v(" "),s("h4",{attrs:{id:"重载"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#重载"}},[a._v("#")]),a._v(" 重载")]),a._v(" "),s("p",[a._v("发生在同一个类中，方法名必须相同，参数类型不同、个数不同、顺序不同，方法返回值和访问修饰符可以不同。")]),a._v(" "),s("p",[a._v("下面是《Java 核心技术》对重载这个概念的介绍：")]),a._v(" "),s("p",[s("img",{attrs:{src:"https://cdn.willlu.cn/image/java/desktopjava%E6%A0%B8%E5%BF%83%E6%8A%80%E6%9C%AF-%E9%87%8D%E8%BD%BD.jpg",alt:""}})]),a._v(" "),s("h4",{attrs:{id:"重写"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#重写"}},[a._v("#")]),a._v(" 重写")]),a._v(" "),s("p",[a._v("重写是子类对父类的允许访问的方法的实现过程进行重新编写,发生在子类中，方法名、参数列表必须相同，返回值范围小于等于父类，抛出的异常范围小于等于父类，访问修饰符范围大于等于父类。另外，如果父类方法访问修饰符为 private 则子类就不能重写该方法。"),s("strong",[a._v("也就是说方法提供的行为改变，而方法的外貌并没有改变。")])]),a._v(" "),s("h2",{attrs:{id:"_11-java-面向对象编程三大特性-封装-继承-多态"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_11-java-面向对象编程三大特性-封装-继承-多态"}},[a._v("#")]),a._v(" 11. Java 面向对象编程三大特性: 封装 继承 多态")]),a._v(" "),s("h3",{attrs:{id:"封装"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#封装"}},[a._v("#")]),a._v(" 封装")]),a._v(" "),s("p",[a._v("封装把一个对象的属性私有化，同时提供一些可以被外界访问的属性的方法，如果属性不想被外界访问，我们大可不必提供方法给外界访问。但是如果一个类没有提供给外界访问的方法，那么这个类也没有什么意义了。")]),a._v(" "),s("h3",{attrs:{id:"继承"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#继承"}},[a._v("#")]),a._v(" 继承")]),a._v(" "),s("p",[a._v("继承是使用已存在的类的定义作为基础建立新类的技术，新类的定义可以增加新的数据或新的功能，也可以用父类的功能，但不能选择性地继承父类。通过使用继承我们能够非常方便地复用以前的代码。")]),a._v(" "),s("p",[s("strong",[a._v("关于继承如下 3 点请记住：")])]),a._v(" "),s("ol",[s("li",[a._v("子类拥有父类对象所有的属性和方法（包括私有属性和私有方法），但是父类中的私有属性和方法子类是无法访问，"),s("strong",[a._v("只是拥有")]),a._v("。")]),a._v(" "),s("li",[a._v("子类可以拥有自己属性和方法，即子类可以对父类进行扩展。")]),a._v(" "),s("li",[a._v("子类可以用自己的方式实现父类的方法。（以后介绍）。")])]),a._v(" "),s("h3",{attrs:{id:"多态"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#多态"}},[a._v("#")]),a._v(" 多态")]),a._v(" "),s("p",[a._v("所谓多态就是指程序中定义的引用变量所指向的具体类型和通过该引用变量发出的方法调用在编程时并不确定，而是在程序运行期间才确定，即一个引用变量到底会指向哪个类的实例对象，该引用变量发出的方法调用到底是哪个类中实现的方法，必须在由程序运行期间才能决定。")]),a._v(" "),s("p",[a._v("在 Java 中有两种形式可以实现多态：继承（多个子类对同一方法的重写）和接口（实现接口并覆盖接口中同一方法）。")]),a._v(" "),s("h2",{attrs:{id:"_12-string-stringbuffer-和-stringbuilder-的区别是什么-string-为什么是不可变的"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_12-string-stringbuffer-和-stringbuilder-的区别是什么-string-为什么是不可变的"}},[a._v("#")]),a._v(" 12. String StringBuffer 和 StringBuilder 的区别是什么? String 为什么是不可变的?")]),a._v(" "),s("p",[s("strong",[a._v("可变性")])]),a._v(" "),s("p",[a._v("简单的来说：String 类中使用 final 关键字修饰字符数组来保存字符串，"),s("code",[a._v("private final char value[]")]),a._v("，所以 String 对象是不可变的。")]),a._v(" "),s("blockquote",[s("p",[a._v("补充（来自"),s("a",{attrs:{href:"https://github.com/Snailclimb/JavaGuide/issues/675",target:"_blank",rel:"noopener noreferrer"}},[a._v("issue 675"),s("OutboundLink")],1),a._v("）：在 Java 9 之后，String 类的实现改用 byte 数组存储字符串 "),s("code",[a._v("private final byte[] value")]),a._v(";")])]),a._v(" "),s("p",[a._v("而 StringBuilder 与 StringBuffer 都继承自 AbstractStringBuilder 类，在 AbstractStringBuilder 中也是使用字符数组保存字符串"),s("code",[a._v("char[]value")]),a._v(" 但是没有用 final 关键字修饰，所以这两种对象都是可变的。")]),a._v(" "),s("p",[a._v("StringBuilder 与 StringBuffer 的构造方法都是调用父类构造方法也就是 AbstractStringBuilder 实现的，大家可以自行查阅源码。")]),a._v(" "),s("p",[s("code",[a._v("AbstractStringBuilder.java")])]),a._v(" "),s("div",{staticClass:"language-java extra-class"},[s("pre",{pre:!0,attrs:{class:"language-java"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("abstract")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("class")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("AbstractStringBuilder")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("implements")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("Appendable")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("CharSequence")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v("\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("/**\n     * The value is used for character storage.\n     */")]),a._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("char")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("[")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("]")]),a._v(" value"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("/**\n     * The count is the number of characters used.\n     */")]),a._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("int")]),a._v(" count"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n\n    "),s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("AbstractStringBuilder")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("int")]),a._v(" capacity"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v("\n        value "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("new")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("char")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("[")]),a._v("capacity"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),a._v("\n")])])]),s("p",[s("strong",[a._v("线程安全性")])]),a._v(" "),s("p",[a._v("String 中的对象是不可变的，也就可以理解为常量，线程安全。AbstractStringBuilder 是 StringBuilder 与 StringBuffer 的公共父类，定义了一些字符串的基本操作，如 expandCapacity、append、insert、indexOf 等公共方法。StringBuffer 对方法加了同步锁或者对调用的方法加了同步锁，所以是线程安全的。StringBuilder 并没有对方法进行加同步锁，所以是非线程安全的。")]),a._v(" "),s("p",[s("strong",[a._v("性能")])]),a._v(" "),s("p",[a._v("每次对 String 类型进行改变的时候，都会生成一个新的 String 对象，然后将指针指向新的 String 对象。StringBuffer 每次都会对 StringBuffer 对象本身进行操作，而不是生成新的对象并改变对象引用。相同情况下使用 StringBuilder 相比使用 StringBuffer 仅能获得 10%~15% 左右的性能提升，但却要冒多线程不安全的风险。")]),a._v(" "),s("p",[s("strong",[a._v("对于三者使用的总结：")])]),a._v(" "),s("ol",[s("li",[a._v("操作少量的数据: 适用 String")]),a._v(" "),s("li",[a._v("单线程操作字符串缓冲区下操作大量数据: 适用 StringBuilder")]),a._v(" "),s("li",[a._v("多线程操作字符串缓冲区下操作大量数据: 适用 StringBuffer")])]),a._v(" "),s("h2",{attrs:{id:"_13-自动装箱与拆箱"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_13-自动装箱与拆箱"}},[a._v("#")]),a._v(" 13. 自动装箱与拆箱")]),a._v(" "),s("ul",[s("li",[s("strong",[a._v("装箱")]),a._v("：将基本类型用它们对应的引用类型包装起来；")]),a._v(" "),s("li",[s("strong",[a._v("拆箱")]),a._v("：将包装类型转换为基本数据类型；")])]),a._v(" "),s("h2",{attrs:{id:"_14-在一个静态方法内调用一个非静态成员为什么是非法的"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_14-在一个静态方法内调用一个非静态成员为什么是非法的"}},[a._v("#")]),a._v(" 14. 在一个静态方法内调用一个非静态成员为什么是非法的?")]),a._v(" "),s("p",[a._v("由于静态方法可以不通过对象进行调用，因此在静态方法里，不能调用其他非静态变量，也不可以访问非静态变量成员。")]),a._v(" "),s("h2",{attrs:{id:"_15-在-java-中定义一个不做事且没有参数的构造方法的作用"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_15-在-java-中定义一个不做事且没有参数的构造方法的作用"}},[a._v("#")]),a._v(" 15. 在 Java 中定义一个不做事且没有参数的构造方法的作用")]),a._v(" "),s("p",[a._v("Java 程序在执行子类的构造方法之前，如果没有用 "),s("code",[a._v("super()")]),a._v("来调用父类特定的构造方法，则会调用父类中“没有参数的构造方法”。因此，如果父类中只定义了有参数的构造方法，而在子类的构造方法中又没有用 "),s("code",[a._v("super()")]),a._v("来调用父类中特定的构造方法，则编译时将发生错误，因为 Java 程序在父类中找不到没有参数的构造方法可供执行。解决办法是在父类里加上一个不做事且没有参数的构造方法。")]),a._v(" "),s("h2",{attrs:{id:"_16-import-java-和-javax-有什么区别？"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_16-import-java-和-javax-有什么区别？"}},[a._v("#")]),a._v(" 16. import java 和 javax 有什么区别？")]),a._v(" "),s("p",[a._v("刚开始的时候 JavaAPI 所必需的包是 java 开头的包，javax 当时只是扩展 API 包来使用。然而随着时间的推移，javax 逐渐地扩展成为 Java API 的组成部分。但是，将扩展从 javax 包移动到 java 包确实太麻烦了，最终会破坏一堆现有的代码。因此，最终决定 javax 包将成为标准 API 的一部分。")]),a._v(" "),s("p",[a._v("所以，实际上 java 和 javax 没有区别。这都是一个名字。")]),a._v(" "),s("h2",{attrs:{id:"_17-接口和抽象类的区别是什么？"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_17-接口和抽象类的区别是什么？"}},[a._v("#")]),a._v(" 17. 接口和抽象类的区别是什么？")]),a._v(" "),s("ol",[s("li",[a._v("接口的方法默认是 public，所有方法在接口中不能有实现(Java 8 开始接口方法可以有默认实现），而抽象类可以有非抽象的方法。")]),a._v(" "),s("li",[a._v("接口中除了 static、final 变量，不能有其他变量，而抽象类中则不一定。")]),a._v(" "),s("li",[a._v("一个类可以实现多个接口，但只能实现一个抽象类。接口自己本身可以通过 extends 关键字扩展多个接口。")]),a._v(" "),s("li",[a._v("接口方法默认修饰符是 public，抽象方法可以有 public、protected 和 default 这些修饰符（抽象方法就是为了被重写所以不能使用 private 关键字修饰！）。")]),a._v(" "),s("li",[a._v("从设计层面来说，抽象是对类的抽象，是一种模板设计，而接口是对行为的抽象，是一种行为的规范。")])]),a._v(" "),s("div",{staticClass:"custom-block tip"},[s("p",{staticClass:"custom-block-title"},[a._v("备注")]),a._v(" "),s("ol",[s("li",[a._v("在 JDK8 中，接口也可以定义静态方法，可以直接用接口名调用。实现类和实现是不可以调用的。如果同时实现两个接口，接口中定义了一样的默认方法，则必须重写，不然会报错。(详见 issue:"),s("a",{attrs:{href:"https://github.com/Snailclimb/JavaGuide/issues/146",target:"_blank",rel:"noopener noreferrer"}},[a._v("https://github.com/Snailclimb/JavaGuide/issues/146"),s("OutboundLink")],1),a._v("。")]),a._v(" "),s("li",[a._v("jdk9 的接口被允许定义私有方法 。")])])]),a._v(" "),s("p",[a._v("总结一下 jdk7~jdk9 Java 中接口概念的变化（"),s("a",{attrs:{href:"https://www.geeksforgeeks.org/private-methods-java-9-interfaces/",target:"_blank",rel:"noopener noreferrer"}},[a._v("相关阅读"),s("OutboundLink")],1),a._v("）：")]),a._v(" "),s("ol",[s("li",[a._v("在 jdk 7 或更早版本中，接口里面只能有常量变量和抽象方法。这些接口方法必须由选择实现接口的类实现。")]),a._v(" "),s("li",[a._v("jdk8 的时候接口可以有默认方法和静态方法功能。")]),a._v(" "),s("li",[a._v("Jdk 9 在接口中引入了私有方法和私有静态方法。")])]),a._v(" "),s("h2",{attrs:{id:"_18-成员变量与局部变量的区别有哪些？"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_18-成员变量与局部变量的区别有哪些？"}},[a._v("#")]),a._v(" 18. 成员变量与局部变量的区别有哪些？")]),a._v(" "),s("ol",[s("li",[a._v("从语法形式上看:成员变量是属于类的，而局部变量是在方法中定义的变量或是方法的参数；成员变量可以被 public,private,static 等修饰符所修饰，而局部变量不能被访问控制修饰符及 static 所修饰；但是，成员变量和局部变量都能被 final 所修饰。")]),a._v(" "),s("li",[a._v("从变量在内存中的存储方式来看:如果成员变量是使用"),s("code",[a._v("static")]),a._v("修饰的，那么这个成员变量是属于类的，如果没有使用"),s("code",[a._v("static")]),a._v("修饰，这个成员变量是属于实例的。而对象存在于堆内存，局部变量则存在于栈内存。")]),a._v(" "),s("li",[a._v("从变量在内存中的生存时间上看:成员变量是对象的一部分，它随着对象的创建而存在，而局部变量随着方法的调用而自动消失。")]),a._v(" "),s("li",[a._v("成员变量如果没有被赋初值:则会自动以类型的默认值而赋值（一种情况例外:被 final 修饰的成员变量也必须显式地赋值），而局部变量则不会自动赋值。")])]),a._v(" "),s("h2",{attrs:{id:"_19-创建一个对象用什么运算符-对象实体与对象引用有何不同"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_19-创建一个对象用什么运算符-对象实体与对象引用有何不同"}},[a._v("#")]),a._v(" 19. 创建一个对象用什么运算符?对象实体与对象引用有何不同?")]),a._v(" "),s("p",[a._v("new 运算符，new 创建对象实例（对象实例在堆内存中），对象引用指向对象实例（对象引用存放在栈内存中）。一个对象引用可以指向 0 个或 1 个对象（一根绳子可以不系气球，也可以系一个气球）;一个对象可以有 n 个引用指向它（可以用 n 条绳子系住一个气球）。")]),a._v(" "),s("h2",{attrs:{id:"_20-什么是方法的返回值-返回值在类的方法里的作用是什么"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_20-什么是方法的返回值-返回值在类的方法里的作用是什么"}},[a._v("#")]),a._v(" 20. 什么是方法的返回值?返回值在类的方法里的作用是什么?")]),a._v(" "),s("p",[a._v("方法的返回值是指我们获取到的某个方法体中的代码执行后产生的结果！（前提是该方法可能产生结果）。返回值的作用:接收出结果，使得它可以用于其他的操作！")]),a._v(" "),s("h2",{attrs:{id:"_21-一个类的构造方法的作用是什么-若一个类没有声明构造方法，该程序能正确执行吗-为什么"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_21-一个类的构造方法的作用是什么-若一个类没有声明构造方法，该程序能正确执行吗-为什么"}},[a._v("#")]),a._v(" 21. 一个类的构造方法的作用是什么? 若一个类没有声明构造方法，该程序能正确执行吗? 为什么?")]),a._v(" "),s("p",[a._v("主要作用是完成对类对象的初始化工作。可以执行。因为一个类即使没有声明构造方法也会有默认的不带参数的构造方法。")]),a._v(" "),s("h2",{attrs:{id:"_22-构造方法有哪些特性？"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_22-构造方法有哪些特性？"}},[a._v("#")]),a._v(" 22. 构造方法有哪些特性？")]),a._v(" "),s("ol",[s("li",[a._v("名字与类名相同。")]),a._v(" "),s("li",[a._v("没有返回值，但不能用 void 声明构造函数。")]),a._v(" "),s("li",[a._v("生成类的对象时自动执行，无需调用。")])]),a._v(" "),s("h2",{attrs:{id:"_23-静态方法和实例方法有何不同"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_23-静态方法和实例方法有何不同"}},[a._v("#")]),a._v(" 23. 静态方法和实例方法有何不同")]),a._v(" "),s("ol",[s("li",[s("p",[a._v('在外部调用静态方法时，可以使用"类名.方法名"的方式，也可以使用"对象名.方法名"的方式。而实例方法只有后面这种方式。也就是说，调用静态方法可以无需创建对象。')])]),a._v(" "),s("li",[s("p",[a._v("静态方法在访问本类的成员时，只允许访问静态成员（即静态成员变量和静态方法），而不允许访问实例成员变量和实例方法；实例方法则无此限制。")])])]),a._v(" "),s("h2",{attrs:{id:"_24-对象的相等与指向他们的引用相等-两者有什么不同"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_24-对象的相等与指向他们的引用相等-两者有什么不同"}},[a._v("#")]),a._v(" 24. 对象的相等与指向他们的引用相等,两者有什么不同?")]),a._v(" "),s("p",[a._v("对象的相等，比的是内存中存放的内容是否相等。而引用相等，比较的是他们指向的内存地址是否相等。")]),a._v(" "),s("h2",{attrs:{id:"_25-在调用子类构造方法之前会先调用父类没有参数的构造方法-其目的是"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_25-在调用子类构造方法之前会先调用父类没有参数的构造方法-其目的是"}},[a._v("#")]),a._v(" 25. 在调用子类构造方法之前会先调用父类没有参数的构造方法,其目的是?")]),a._v(" "),s("p",[a._v("帮助子类做初始化工作。")]),a._v(" "),s("h2",{attrs:{id:"_26-与-equals-重要"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_26-与-equals-重要"}},[a._v("#")]),a._v(" 26. == 与 equals(重要)")]),a._v(" "),s("p",[s("strong",[a._v("==")]),a._v(" : 它的作用是判断两个对象的地址是不是相等。即，判断两个对象是不是同一个对象(基本数据类型==比较的是值，引用数据类型==比较的是内存地址)。")]),a._v(" "),s("p",[s("strong",[a._v("equals()")]),a._v(" : 它的作用也是判断两个对象是否相等。但它一般有两种使用情况：")]),a._v(" "),s("ul",[s("li",[a._v("情况 1：类没有覆盖 equals() 方法。则通过 equals() 比较该类的两个对象时，等价于通过“==”比较这两个对象。")]),a._v(" "),s("li",[a._v("情况 2：类覆盖了 equals() 方法。一般，我们都覆盖 equals() 方法来比较两个对象的内容是否相等；若它们的内容相等，则返回 true (即，认为这两个对象相等)。")])]),a._v(" "),s("p",[s("strong",[a._v("举个例子：")])]),a._v(" "),s("div",{staticClass:"language-java extra-class"},[s("pre",{pre:!0,attrs:{class:"language-java"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("public")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("class")]),a._v(" test1 "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("public")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("static")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("void")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("main")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("String")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("[")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("]")]),a._v(" args"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v("\n        "),s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("String")]),a._v(" a "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("new")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("String")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[a._v('"ab"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("// a 为一个引用")]),a._v("\n        "),s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("String")]),a._v(" b "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("new")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("String")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[a._v('"ab"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("// b为另一个引用,对象的内容一样")]),a._v("\n        "),s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("String")]),a._v(" aa "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[a._v('"ab"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("// 放在常量池中")]),a._v("\n        "),s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("String")]),a._v(" bb "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[a._v('"ab"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("// 从常量池中查找")]),a._v("\n        "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("if")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),a._v("aa "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("==")]),a._v(" bb"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("// true")]),a._v("\n            "),s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("System")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),a._v("out"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("println")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[a._v('"aa==bb"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n        "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("if")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),a._v("a "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("==")]),a._v(" b"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("// false，非同一对象")]),a._v("\n            "),s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("System")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),a._v("out"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("println")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[a._v('"a==b"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n        "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("if")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),a._v("a"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("equals")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),a._v("b"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("// true")]),a._v("\n            "),s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("System")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),a._v("out"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("println")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[a._v('"aEQb"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n        "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("if")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("42")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("==")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("42.0")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("// true")]),a._v("\n            "),s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("System")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),a._v("out"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("println")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[a._v('"true"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n        "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),a._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),a._v("\n")])])]),s("p",[s("strong",[a._v("说明：")])]),a._v(" "),s("ul",[s("li",[a._v("String 中的 equals 方法是被重写过的，因为 object 的 equals 方法是比较的对象的内存地址，而 String 的 equals 方法比较的是对象的值。")]),a._v(" "),s("li",[a._v("当创建 String 类型的对象时，虚拟机会在常量池中查找有没有已经存在的值和要创建的值相同的对象，如果有就把它赋给当前引用。如果没有就在常量池中重新创建一个 String 对象。")])]),a._v(" "),s("h2",{attrs:{id:"_27-hashcode-与-equals-重要"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_27-hashcode-与-equals-重要"}},[a._v("#")]),a._v(" 27. hashCode 与 equals (重要)")]),a._v(" "),s("p",[a._v("面试官可能会问你：“你重写过 hashcode 和 equals 么，为什么重写 equals 时必须重写 hashCode 方法？”")]),a._v(" "),s("h3",{attrs:{id:"hashcode（）介绍"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#hashcode（）介绍"}},[a._v("#")]),a._v(" hashCode（）介绍")]),a._v(" "),s("p",[a._v("hashCode() 的作用是获取哈希码，也称为散列码；它实际上是返回一个 int 整数。这个哈希码的作用是确定该对象在哈希表中的索引位置。hashCode() 定义在 JDK 的 Object.java 中，这就意味着 Java 中的任何类都包含有 hashCode() 函数。")]),a._v(" "),s("p",[a._v("散列表存储的是键值对(key-value)，它的特点是：能根据“键”快速的检索出对应的“值”。这其中就利用到了散列码！（可以快速找到所需要的对象）")]),a._v(" "),s("h3",{attrs:{id:"为什么要有-hashcode"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#为什么要有-hashcode"}},[a._v("#")]),a._v(" 为什么要有 hashCode")]),a._v(" "),s("p",[s("strong",[a._v("我们先以“HashSet 如何检查重复”为例子来说明为什么要有 hashCode：")]),a._v(" 当你把对象加入 HashSet 时，HashSet 会先计算对象的 hashcode 值来判断对象加入的位置，同时也会与该位置其他已经加入的对象的 hashcode 值作比较，如果没有相符的 hashcode，HashSet 会假设对象没有重复出现。但是如果发现有相同 hashcode 值的对象，这时会调用 "),s("code",[a._v("equals()")]),a._v("方法来检查 hashcode 相等的对象是否真的相同。如果两者相同，HashSet 就不会让其加入操作成功。如果不同的话，就会重新散列到其他位置。（摘自我的 Java 启蒙书《Head first java》第二版）。这样我们就大大减少了 equals 的次数，相应就大大提高了执行速度。")]),a._v(" "),s("p",[a._v("通过我们可以看出："),s("code",[a._v("hashCode()")]),a._v(" 的作用就是"),s("strong",[a._v("获取哈希码")]),a._v("，也称为散列码；它实际上是返回一个 int 整数。这个"),s("strong",[a._v("哈希码的作用")]),a._v("是确定该对象在哈希表中的索引位置。"),s("strong",[s("code",[a._v("hashCode()")]),a._v("在散列表中才有用，在其它情况下没用")]),a._v("。在散列表中 hashCode() 的作用是获取对象的散列码，进而确定该对象在散列表中的位置。")]),a._v(" "),s("h3",{attrs:{id:"hashcode（）与-equals（）的相关规定"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#hashcode（）与-equals（）的相关规定"}},[a._v("#")]),a._v(" hashCode（）与 equals（）的相关规定")]),a._v(" "),s("ol",[s("li",[a._v("如果两个对象相等，则 hashcode 一定也是相同的")]),a._v(" "),s("li",[a._v("两个对象相等,对两个对象分别调用 equals 方法都返回 true")]),a._v(" "),s("li",[a._v("两个对象有相同的 hashcode 值，它们也不一定是相等的")]),a._v(" "),s("li",[s("strong",[a._v("因此，equals 方法被覆盖过，则 hashCode 方法也必须被覆盖")])]),a._v(" "),s("li",[a._v("hashCode() 的默认行为是对堆上的对象产生独特值。如果没有重写 hashCode()，则该 class 的两个对象无论如何都不会相等（即使这两个对象指向相同的数据）")])]),a._v(" "),s("p",[a._v("推荐阅读："),s("a",{attrs:{href:"https://www.cnblogs.com/skywang12345/p/3324958.html",target:"_blank",rel:"noopener noreferrer"}},[a._v("Java hashCode() 和 equals()的若干问题解答"),s("OutboundLink")],1)]),a._v(" "),s("h2",{attrs:{id:"_28-为什么-java-中只有值传递？"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_28-为什么-java-中只有值传递？"}},[a._v("#")]),a._v(" 28. 为什么 Java 中只有值传递？")]),a._v(" "),s("p",[s("a",{attrs:{href:"https://juejin.im/post/5e18879e6fb9a02fc63602e2",target:"_blank",rel:"noopener noreferrer"}},[a._v("为什么 Java 中只有值传递？"),s("OutboundLink")],1)]),a._v(" "),s("h2",{attrs:{id:"_29-简述线程、程序、进程的基本概念。以及他们之间关系是什么"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_29-简述线程、程序、进程的基本概念。以及他们之间关系是什么"}},[a._v("#")]),a._v(" 29. 简述线程、程序、进程的基本概念。以及他们之间关系是什么?")]),a._v(" "),s("p",[s("strong",[a._v("线程")]),a._v("与进程相似，但线程是一个比进程更小的执行单位。一个进程在其执行的过程中可以产生多个线程。与进程不同的是同类的多个线程共享同一块内存空间和一组系统资源，所以系统在产生一个线程，或是在各个线程之间作切换工作时，负担要比进程小得多，也正因为如此，线程也被称为轻量级进程。")]),a._v(" "),s("p",[s("strong",[a._v("程序")]),a._v("是含有指令和数据的文件，被存储在磁盘或其他的数据存储设备中，也就是说程序是静态的代码。")]),a._v(" "),s("p",[s("strong",[a._v("进程")]),a._v("是程序的一次执行过程，是系统运行程序的基本单位，因此进程是动态的。系统运行一个程序即是一个进程从创建，运行到消亡的过程。简单来说，一个进程就是一个执行中的程序，它在计算机中一个指令接着一个指令地执行着，同时，每个进程还占有某些系统资源如 CPU 时间，内存空间，文件，输入输出设备的使用权等等。换句话说，当程序在执行时，将会被操作系统载入内存中。\n线程是进程划分成的更小的运行单位。线程和进程最大的不同在于基本上各进程是独立的，而各线程则不一定，因为同一进程中的线程极有可能会相互影响。从另一角度来说，进程属于操作系统的范畴，主要是同一段时间内，可以同时执行一个以上的程序，而线程则是在同一程序内几乎同时执行一个以上的程序段。")]),a._v(" "),s("h2",{attrs:{id:"_30-线程有哪些基本状态"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_30-线程有哪些基本状态"}},[a._v("#")]),a._v(" 30. 线程有哪些基本状态?")]),a._v(" "),s("p",[a._v("Java 线程在运行的生命周期中的指定时刻只可能处于下面 6 种不同状态的其中一个状态（图源《Java 并发编程艺术》4.1.4 节）。")]),a._v(" "),s("p",[s("img",{attrs:{src:"https://cdn.willlu.cn/image/java/Java%E7%BA%BF%E7%A8%8B%E7%9A%84%E7%8A%B6%E6%80%81.png",alt:"Java线程的状态"}})]),a._v(" "),s("p",[a._v("线程在生命周期中并不是固定处于某一个状态而是随着代码的执行在不同状态之间切换。Java 线程状态变迁如下图所示（图源《Java 并发编程艺术》4.1.4 节）：")]),a._v(" "),s("p",[s("img",{attrs:{src:"https://cdn.willlu.cn/image/java/Java%20%E7%BA%BF%E7%A8%8B%E7%8A%B6%E6%80%81%E5%8F%98%E8%BF%81.png",alt:"Java线程状态变迁"}})]),a._v(" "),s("p",[a._v("由上图可以看出：")]),a._v(" "),s("p",[a._v("线程创建之后它将处于 "),s("strong",[a._v("NEW（新建）")]),a._v(" 状态，调用 "),s("code",[a._v("start()")]),a._v(" 方法后开始运行，线程这时候处于 "),s("strong",[a._v("READY（可运行）")]),a._v(" 状态。可运行状态的线程获得了 cpu 时间片（timeslice）后就处于 "),s("strong",[a._v("RUNNING（运行）")]),a._v(" 状态。")]),a._v(" "),s("div",{staticClass:"custom-block tip"},[s("p",{staticClass:"custom-block-title"},[a._v("提示")]),a._v(" "),s("p",[a._v("操作系统隐藏 Java 虚拟机（JVM）中的 READY 和 RUNNING 状态，它只能看到 RUNNABLE 状态（图源："),s("a",{attrs:{href:"https://howtodoinjava.com/",target:"_blank",rel:"noopener noreferrer"}},[a._v("HowToDoInJava"),s("OutboundLink")],1),a._v("："),s("a",{attrs:{href:"https://howtodoinjava.com/java/multi-threading/java-thread-life-cycle-and-thread-states/",target:"_blank",rel:"noopener noreferrer"}},[a._v("Java Thread Life Cycle and Thread States"),s("OutboundLink")],1),a._v("），所以 Java 系统一般将这两个状态统称为 "),s("strong",[a._v("RUNNABLE（运行中）")]),a._v(" 状态 。")])]),a._v(" "),s("p",[s("img",{attrs:{src:"https://cdn.willlu.cn/image/java/RUNNABLE-VS-RUNNING.png",alt:"RUNNABLE-VS-RUNNING"}})]),a._v(" "),s("p",[a._v("当线程执行 "),s("code",[a._v("wait()")]),a._v("方法之后，线程进入 **WAITING（等待）**状态。进入等待状态的线程需要依靠其他线程的通知才能够返回到运行状态，而 "),s("strong",[a._v("TIME_WAITING(超时等待)")]),a._v(" 状态相当于在等待状态的基础上增加了超时限制，比如通过 "),s("code",[a._v("sleep（long millis）")]),a._v("方法或 "),s("code",[a._v("wait（long millis）")]),a._v("方法可以将 Java 线程置于 TIMED WAITING 状态。当超时时间到达后 Java 线程将会返回到 RUNNABLE 状态。当线程调用同步方法时，在没有获取到锁的情况下，线程将会进入到 "),s("strong",[a._v("BLOCKED（阻塞）")]),a._v(" 状态。线程在执行 Runnable 的"),s("code",[a._v("run()")]),a._v("方法之后将会进入到 "),s("strong",[a._v("TERMINATED（终止）")]),a._v(" 状态。")]),a._v(" "),s("h2",{attrs:{id:"_31-关于-final-关键字的一些总结"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_31-关于-final-关键字的一些总结"}},[a._v("#")]),a._v(" 31 关于 final 关键字的一些总结")]),a._v(" "),s("p",[a._v("final 关键字主要用在三个地方：变量、方法、类。")]),a._v(" "),s("ol",[s("li",[a._v("对于一个 final 变量，如果是基本数据类型的变量，则其数值一旦在初始化之后便不能更改；如果是引用类型的变量，则在对其初始化之后便不能再让其指向另一个对象。")]),a._v(" "),s("li",[a._v("当用 final 修饰一个类时，表明这个类不能被继承。final 类中的所有成员方法都会被隐式地指定为 final 方法。")]),a._v(" "),s("li",[a._v("使用 final 方法的原因有两个。第一个原因是把方法锁定，以防任何继承类修改它的含义；第二个原因是效率。在早期的 Java 实现版本中，会将 final 方法转为内嵌调用。但是如果方法过于庞大，可能看不到内嵌调用带来的任何性能提升（现在的 Java 版本已经不需要使用 final 方法进行这些优化了）。类中所有的 private 方法都隐式地指定为 final。")])]),a._v(" "),s("h2",{attrs:{id:"_32-java-中的异常处理"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_32-java-中的异常处理"}},[a._v("#")]),a._v(" 32 Java 中的异常处理")]),a._v(" "),s("h3",{attrs:{id:"java-异常类层次结构图"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#java-异常类层次结构图"}},[a._v("#")]),a._v(" Java 异常类层次结构图")]),a._v(" "),s("p",[s("img",{attrs:{src:"https://cdn.willlu.cn/image/java/Exception.png",alt:"Java异常类层次结构图"}})]),a._v(" "),s("p",[a._v("在 Java 中，所有的异常都有一个共同的祖先 java.lang 包中的 "),s("strong",[a._v("Throwable 类")]),a._v("。Throwable： 有两个重要的子类："),s("strong",[a._v("Exception（异常）")]),a._v(" 和 "),s("strong",[a._v("Error（错误）")]),a._v(" ，二者都是 Java 异常处理的重要子类，各自都包含大量子类。")]),a._v(" "),s("p",[s("strong",[a._v("Error（错误）:是程序无法处理的错误")]),a._v("，表示运行应用程序中较严重问题。大多数错误与代码编写者执行的操作无关，而表示代码运行时 JVM（Java 虚拟机）出现的问题。例如，Java 虚拟机运行错误（Virtual MachineError），当 JVM 不再有继续执行操作所需的内存资源时，将出现 OutOfMemoryError。这些异常发生时，Java 虚拟机（JVM）一般会选择线程终止。")]),a._v(" "),s("p",[a._v("这些错误表示故障发生于虚拟机自身、或者发生在虚拟机试图执行应用时，如 Java 虚拟机运行错误（Virtual MachineError）、类定义错误（NoClassDefFoundError）等。这些错误是不可查的，因为它们在应用程序的控制和处理能力之 外，而且绝大多数是程序运行时不允许出现的状况。对于设计合理的应用程序来说，即使确实发生了错误，本质上也不应该试图去处理它所引起的异常状况。在 Java 中，错误通过 Error 的子类描述。")]),a._v(" "),s("p",[s("strong",[a._v("Exception（异常）:是程序本身可以处理的异常")]),a._v("。"),a._v("Exception 类有一个重要的子类 "),s("strong",[a._v("RuntimeException")]),a._v("。RuntimeException 异常由 Java 虚拟机抛出。"),s("strong",[a._v("NullPointerException")]),a._v("（要访问的变量没有引用任何对象时，抛出该异常）、"),s("strong",[a._v("ArithmeticException")]),a._v("（算术运算异常，一个整数除以 0 时，抛出该异常）和 "),s("strong",[a._v("ArrayIndexOutOfBoundsException")]),a._v(" （下标越界异常）。")]),a._v(" "),s("p",[s("strong",[a._v("注意：异常和错误的区别：异常能被程序本身处理，错误是无法处理。")])]),a._v(" "),s("h3",{attrs:{id:"throwable-类常用方法"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#throwable-类常用方法"}},[a._v("#")]),a._v(" Throwable 类常用方法")]),a._v(" "),s("ul",[s("li",[s("strong",[a._v("public string getMessage()")]),a._v(":返回异常发生时的简要描述")]),a._v(" "),s("li",[s("strong",[a._v("public string toString()")]),a._v(":返回异常发生时的详细信息")]),a._v(" "),s("li",[s("strong",[a._v("public string getLocalizedMessage()")]),a._v(":返回异常对象的本地化信息。使用 Throwable 的子类覆盖这个方法，可以生成本地化信息。如果子类没有覆盖该方法，则该方法返回的信息与 getMessage（）返回的结果相同")]),a._v(" "),s("li",[s("strong",[a._v("public void printStackTrace()")]),a._v(":在控制台上打印 Throwable 对象封装的异常信息")])]),a._v(" "),s("h3",{attrs:{id:"异常处理总结"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#异常处理总结"}},[a._v("#")]),a._v(" 异常处理总结")]),a._v(" "),s("ul",[s("li",[s("strong",[a._v("try 块：")]),a._v(" 用于捕获异常。其后可接零个或多个 catch 块，如果没有 catch 块，则必须跟一个 finally 块。")]),a._v(" "),s("li",[s("strong",[a._v("catch 块：")]),a._v(" 用于处理 try 捕获到的异常。")]),a._v(" "),s("li",[s("strong",[a._v("finally 块：")]),a._v(" 无论是否捕获或处理异常，finally 块里的语句都会被执行。当在 try 块或 catch 块中遇到 return\n语句时，finally 语句块将在方法返回之前被执行。")])]),a._v(" "),s("p",[s("strong",[a._v("在以下 4 种特殊情况下，finally 块不会被执行：")])]),a._v(" "),s("ol",[s("li",[a._v("在 finally 语句块第一行发生了异常。 因为在其他行，finally 块还是会得到执行")]),a._v(" "),s("li",[a._v("在前面的代码中用了 System.exit(int)已退出程序。 exit 是带参函数 ；若该语句在异常语句之后，finally 会执行")]),a._v(" "),s("li",[a._v("程序所在的线程死亡。")]),a._v(" "),s("li",[a._v("关闭 CPU。")])]),a._v(" "),s("p",[s("strong",[a._v("注意：")]),a._v(" 当 try 语句和 finally 语句中都有 return 语句时，在方法返回之前，finally 语句的内容将被执行，并且 finally 语句的返回值将会覆盖原始的返回值。如下：")]),a._v(" "),s("div",{staticClass:"language-java extra-class"},[s("pre",{pre:!0,attrs:{class:"language-java"}},[s("code",[a._v("    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("public")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("static")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("int")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("f")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("int")]),a._v(" value"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v("\n        "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("try")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v("\n            "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("return")]),a._v(" value "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("*")]),a._v(" value"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n        "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("finally")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v("\n            "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("if")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),a._v("value "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("==")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("2")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v("\n                "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("return")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("0")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n            "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),a._v("\n        "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),a._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),a._v("\n")])])]),s("p",[a._v("如果调用 "),s("code",[a._v("f(2)")]),a._v("，返回值将是 0，因为 finally 语句的返回值覆盖了 try 语句块的返回值。")]),a._v(" "),s("h2",{attrs:{id:"_33-java-序列化中如果有些字段不想进行序列化，怎么办？"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_33-java-序列化中如果有些字段不想进行序列化，怎么办？"}},[a._v("#")]),a._v(" 33 Java 序列化中如果有些字段不想进行序列化，怎么办？")]),a._v(" "),s("p",[a._v("对于不想进行序列化的变量，使用 transient 关键字修饰。")]),a._v(" "),s("p",[a._v("transient 关键字的作用是：阻止实例中那些用此关键字修饰的的变量序列化；当对象被反序列化时，被 transient 修饰的变量值不会被持久化和恢复。transient 只能修饰变量，不能修饰类和方法。")]),a._v(" "),s("h2",{attrs:{id:"_34-获取用键盘输入常用的两种方法"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_34-获取用键盘输入常用的两种方法"}},[a._v("#")]),a._v(" 34 获取用键盘输入常用的两种方法")]),a._v(" "),s("p",[a._v("方法 1：通过 Scanner")]),a._v(" "),s("div",{staticClass:"language-java extra-class"},[s("pre",{pre:!0,attrs:{class:"language-java"}},[s("code",[s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("Scanner")]),a._v(" input "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("new")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("Scanner")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("System")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),a._v("in"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("String")]),a._v(" s  "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" input"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("nextLine")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\ninput"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("close")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n")])])]),s("p",[a._v("方法 2：通过 BufferedReader")]),a._v(" "),s("div",{staticClass:"language-java extra-class"},[s("pre",{pre:!0,attrs:{class:"language-java"}},[s("code",[s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("BufferedReader")]),a._v(" input "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("new")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("BufferedReader")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("new")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("InputStreamReader")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("System")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),a._v("in"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("String")]),a._v(" s "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" input"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("readLine")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n")])])]),s("h2",{attrs:{id:"_35-java-中-io-流"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_35-java-中-io-流"}},[a._v("#")]),a._v(" 35 Java 中 IO 流")]),a._v(" "),s("h3",{attrs:{id:"java-中-io-流分为几种"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#java-中-io-流分为几种"}},[a._v("#")]),a._v(" Java 中 IO 流分为几种?")]),a._v(" "),s("ul",[s("li",[a._v("按照流的流向分，可以分为输入流和输出流；")]),a._v(" "),s("li",[a._v("按照操作单元划分，可以划分为字节流和字符流；")]),a._v(" "),s("li",[a._v("按照流的角色划分为节点流和处理流。")])]),a._v(" "),s("p",[a._v("Java Io 流共涉及 40 多个类，这些类看上去很杂乱，但实际上很有规则，而且彼此之间存在非常紧密的联系， Java I0 流的 40 多个类都是从如下 4 个抽象类基类中派生出来的。")]),a._v(" "),s("ul",[s("li",[a._v("InputStream/Reader: 所有的输入流的基类，前者是字节输入流，后者是字符输入流。")]),a._v(" "),s("li",[a._v("OutputStream/Writer: 所有输出流的基类，前者是字节输出流，后者是字符输出流。")])]),a._v(" "),s("p",[a._v("按操作方式分类结构图：")]),a._v(" "),s("p",[s("img",{attrs:{src:"https://cdn.willlu.cn/image/java/IO-%E6%93%8D%E4%BD%9C%E6%96%B9%E5%BC%8F%E5%88%86%E7%B1%BB.png",alt:"IO-操作方式分类"}})]),a._v(" "),s("p",[a._v("按操作对象分类结构图：")]),a._v(" "),s("p",[s("img",{attrs:{src:"https://cdn.willlu.cn/image/java/IO-%E6%93%8D%E4%BD%9C%E5%AF%B9%E8%B1%A1%E5%88%86%E7%B1%BB.png",alt:"IO-操作对象分类"}})]),a._v(" "),s("h3",{attrs:{id:"既然有了字节流-为什么还要有字符流"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#既然有了字节流-为什么还要有字符流"}},[a._v("#")]),a._v(" 既然有了字节流,为什么还要有字符流?")]),a._v(" "),s("p",[a._v("问题本质想问："),s("strong",[a._v("不管是文件读写还是网络发送接收，信息的最小存储单元都是字节，那为什么 I/O 流操作要分为字节流操作和字符流操作呢？")])]),a._v(" "),s("p",[a._v("回答：字符流是由 Java 虚拟机将字节转换得到的，问题就出在这个过程还算是非常耗时，并且，如果我们不知道编码类型就很容易出现乱码问题。所以， I/O 流就干脆提供了一个直接操作字符的接口，方便我们平时对字符进行流操作。如果音频文件、图片等媒体文件用字节流比较好，如果涉及到字符的话使用字符流比较好。")]),a._v(" "),s("h3",{attrs:{id:"bio-nio-aio-有什么区别"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#bio-nio-aio-有什么区别"}},[a._v("#")]),a._v(" BIO,NIO,AIO 有什么区别?")]),a._v(" "),s("ul",[s("li",[s("strong",[a._v("BIO (Blocking I/O):")]),a._v(" 同步阻塞 I/O 模式，数据的读取写入必须阻塞在一个线程内等待其完成。在活动连接数不是特别高（小于单机 1000）的情况下，这种模型是比较不错的，可以让每一个连接专注于自己的 I/O 并且编程模型简单，也不用过多考虑系统的过载、限流等问题。线程池本身就是一个天然的漏斗，可以缓冲一些系统处理不了的连接或请求。但是，当面对十万甚至百万级连接的时候，传统的 BIO 模型是无能为力的。因此，我们需要一种更高效的 I/O 处理模型来应对更高的并发量。")]),a._v(" "),s("li",[s("strong",[a._v("NIO (Non-blocking/New I/O):")]),a._v("  NIO 是一种同步非阻塞的 I/O 模型，在 Java 1.4 中引入了 NIO 框架，对应 java.nio 包，提供了 Channel , Selector，Buffer 等抽象。NIO 中的 N 可以理解为 Non-blocking，不单纯是 New。它支持面向缓冲的，基于通道的 I/O 操作方法。 NIO 提供了与传统 BIO 模型中的 "),s("code",[a._v("Socket")]),a._v(" 和 "),s("code",[a._v("ServerSocket")]),a._v(" 相对应的 "),s("code",[a._v("SocketChannel")]),a._v(" 和 "),s("code",[a._v("ServerSocketChannel")]),a._v(" 两种不同的套接字通道实现,两种通道都支持阻塞和非阻塞两种模式。阻塞模式使用就像传统中的支持一样，比较简单，但是性能和可靠性都不好；非阻塞模式正好与之相反。对于低负载、低并发的应用程序，可以使用同步阻塞 I/O 来提升开发速率和更好的维护性；对于高负载、高并发的（网络）应用，应使用 NIO 的非阻塞模式来开发")]),a._v(" "),s("li",[s("strong",[a._v("AIO (Asynchronous I/O):")]),a._v(" AIO 也就是 NIO 2。在 Java 7 中引入了 NIO 的改进版 NIO 2,它是异步非阻塞的 IO 模型。异步 IO 是基于事件和回调机制实现的，也就是应用操作之后会直接返回，不会堵塞在那里，当后台处理完成，操作系统会通知相应的线程进行后续的操作。AIO 是异步 IO 的缩写，虽然 NIO 在网络操作中，提供了非阻塞的方法，但是 NIO 的 IO 行为还是同步的。对于 NIO 来说，我们的业务线程是在 IO 操作准备好时，得到通知，接着就由这个线程自行进行 IO 操作，IO 操作本身是同步的。查阅网上相关资料，我发现就目前来说 AIO 的应用还不是很广泛，Netty 之前也尝试使用过 AIO，不过又放弃了。")])]),a._v(" "),s("h2",{attrs:{id:"_36-常见关键字总结-static-final-this-super"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_36-常见关键字总结-static-final-this-super"}},[a._v("#")]),a._v(" 36. 常见关键字总结:static,final,this,super")]),a._v(" "),s("p",[a._v("详见笔主的这篇文章:  https://snailclimb.gitee.io/javaguide/#/docs/java/basic/final,static,this,super")]),a._v(" "),s("h2",{attrs:{id:"_37-collections-工具类和-arrays-工具类常见方法总结"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_37-collections-工具类和-arrays-工具类常见方法总结"}},[a._v("#")]),a._v(" 37. Collections 工具类和 Arrays 工具类常见方法总结")]),a._v(" "),s("p",[a._v("详见笔主的这篇文章:  https://gitee.com/SnailClimb/JavaGuide/blob/master/docs/java/basic/Arrays,CollectionsCommonMethods.md")]),a._v(" "),s("h2",{attrs:{id:"_38-深拷贝-vs-浅拷贝"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_38-深拷贝-vs-浅拷贝"}},[a._v("#")]),a._v(" 38. 深拷贝 vs 浅拷贝")]),a._v(" "),s("ol",[s("li",[s("strong",[a._v("浅拷贝")]),a._v("：对基本数据类型进行值传递，对引用数据类型进行引用传递般的拷贝，此为浅拷贝。")]),a._v(" "),s("li",[s("strong",[a._v("深拷贝")]),a._v("：对基本数据类型进行值传递，对引用数据类型，创建一个新的对象，并复制其内容，此为深拷贝。")])]),a._v(" "),s("p",[s("img",{attrs:{src:"https://cdn.willlu.cn/image/java/java-deep-and-shallow-copy.jpg",alt:"deep and shallow copy"}})]),a._v(" "),s("h2",{attrs:{id:"参考"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#参考"}},[a._v("#")]),a._v(" 参考")]),a._v(" "),s("ul",[s("li",[a._v("https://stackoverflow.com/questions/1906445/what-is-the-difference-between-jdk-and-jre")]),a._v(" "),s("li",[a._v("https://www.educba.com/oracle-vs-openjdk/")]),a._v(" "),s("li",[a._v("https://stackoverflow.com/questions/22358071/differences-between-oracle-jdk-and-openjdk?answertab=active#tab-top")])]),a._v(" "),s("h2",{attrs:{id:"来源"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#来源"}},[a._v("#")]),a._v(" 来源")]),a._v(" "),s("ul",[s("li",[a._v("https://github.com/Snailclimb/JavaGuide")])])])}),[],!1,null,null,null);t.default=r.exports}}]);